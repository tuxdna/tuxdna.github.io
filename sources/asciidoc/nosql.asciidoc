\{% include JB/setup %}

[[what-is-nosql]]
What is NoSQL ?
---------------

http://en.wikipedia.org/wiki/NoSQL[NoSQL] stands for _Not only SQL_, (
it doesn't mean _not SQL_ ). This basically means that a traditional SQL
database is a NoSQL database too.

[[comparison-of-nosql-with-traditional-databases]]
Comparison of NoSQL with traditional databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NoSQL databases essentially

* sacrifice some of the ACID properties
* simpler API ( with less powerful SQL like queries ) e.g. Hive,
MongoDB, Dynamo, Cassandra

[[classification-based-on-the-type-of-data]]
Classification based on the type of data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here I am listing some categories and a few well know examples:

* _Wide Column Store / Column Families_: HBASE, Cassandra
* _Document Store_: CouchDB, MongoDB, ElasticSearch
* _Key Value / Tuple Store_: Memcache, Redis
* _Graph Databases_: Neo4J
* _Multimodel Databases_: OrientDB ( both document and graph data )
* _Object Databases_: ZODB ( basically a distributed Object database,
where you can call methods on objects stored in DB )
* _Grid / Cloud Databases_: Infinispan ( a part of JBoss project ) is
basically a distributed key-value store
* _XML Databases_: eXist DB ( I have yet to figure out why it exists ?
:-) )
* _Multidimensional Databases_: RASDAMAN. These database are used in
scientific research, business intelligence and analytics. ( heard of
data cube ? ), basically for drilling down into huge amount of data
metrics.
* _Multivalue Databases_: TBD
* _Event Sourcing_: Event Store ( for complex event processing - CEP )
* and many other uncategorized

That may sound like a lot of data, and yes it is. Understanding one
single database in itself is a big task, let alone all the above
categories.

[[how-do-we-decide-which-database-to-use]]
How do we decide which database to use?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Basicall you can choose from a variety of parameters. Here are some
decisoin criteria for NoSQL databases / RDBMSes

* replication: Do you need replication?
* partition: What kind of partitions do you want?
** static
** dynamic
* distributed hash table ( DHT ): How do you want your data to be
distributed over a set of data nodes?
* consistency : Do you need consistency?
* key / value or document / object: What is your data like?

[[base-theorem]]
BASE Theorem
~~~~~~~~~~~~

http://www.johndcook.com/blog/2009/07/06/brewer-cap-theorem-base/[BASE]
- basically available, soft state and eventually consistent.

BASE Theorem is the motivation behind many of the now popular NoSQL
databases. Think of your wall posts apparing after a dealy on a friend's
Facebook wall. That is eventual consistency.

[[cap-theorem]]
CAP Theorem
~~~~~~~~~~~

http://en.wikipedia.org/wiki/CAP_theorem[CAP] Theorem - Out of
Consistency, Availability and Partition tolerance, a system can only
guarantee two of the three at a time.

* Consistency - all nodes see the same data at the same time
* Availability - a guarantee that every request receives a response
about whether it was successful or failed
* Partition tolerance - the system continues to operate despite
arbitrary message loss

[[acid-compliance]]
ACID compliance
~~~~~~~~~~~~~~~

http://en.wikipedia.org/wiki/ACID[ACID] properties

* atomic - all or nothing
* consistent - any operation should move from one consistent state to
another
* isolated - data in a transaction is not visible to others until the
transaction finishes
* durable - data is not lost in case of system failure

consistency - is affected by network latency

partition tolerance - has an effect on number of requests

---------------------------------------------------
  | RDBMS | Dynamo / Cassandra | HBase / BigTable |
C |  Y    | N                  | Y                |
A |  Y    | Y                  | N                |
P |  N    | Y                  | Y                |
---------------------------------------------------

Papers and links:

* http://research.google.com/archive/bigtable.html[Google BigTable] :
HBase, Big Table
*
http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf[Apache
Dynamo] : Dynamo, Cassandra
* https://github.com/orientechnologies/orientdb#orientdb[OrientDB] uses
RB+Tree ( RB Tree + B+ Tree )

[[more-exhaustive-list-of-databases]]
More exhaustive list of databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Read more at: http://NoSQL-Databases.org[NoSQL-Databases.org]

[[mongodb]]
MongoDB
~~~~~~~

Using MongoDB

*
http://stackoverflow.com/questions/10242501/how-to-find-a-substring-in-a-field-in-mongodb[regex
search in mongodb]

Examples:

----------------------------------------------------------------------
// search using regex
db.c01.find({"sourceurls": {$regex: //i}} )
// search array elements using regex
db.c01.find({"sourceurls": { $elemMatch : {$regex: /Monitoring/i}} } )
----------------------------------------------------------------------
